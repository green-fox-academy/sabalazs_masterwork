openapi: 3.0.0
info:
  title: Bakery App API
  description: Simple API for the Bakery App. Resources: users, products, label, orders, images
  version: 1.0.0
tags:
  - name: Authentication
  - name: Users
  - name: Products
  - name: Labels
  - name: Orders
  - name: Images
paths:
  /users:
    post:
      tags:
        - Users
      summary: Add a new user
      requestBody:
        description: User data
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: email@email.com
                password:
                  type: string
                  format: password
                  example: supersecretpassword
      responses:
        201:
          description: 'User has been created, returning the id of the new user.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 611a79822bfa1857e423ad75
                    description: ID of the created user
        400:
          $ref: '#/components/responses/InvalidInput'
        409:
          $ref: '#/components/responses/UserExists'
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get a user
      parameters:
      - name: id
        in: path
        description: Id of the user that needs to be returned
        required: true
        schema:
          type: string
          example: 611a79822bfa1857e423ad75
      responses:
        200:
          description: 'Returning requested user data.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: 611a6b796e6c525220d330d7
                  email:
                    type: email
                    example: john.doe@email.com
                  role:
                    type: string
                    enum: [customer, admin]
                    example: customer
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error: User not found.
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Forbidden'
  /products:
    post:
      tags:
        - Products
      summary: Add a new product
      requestBody:
        description: Product info
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
              properties:
                name:
                  type: string
                  example: Vajas croissant
                price:
                  type: number
                  example: 800
                labels:
                  type: array
                  example: ["akciós"]
      responses:
        201:
          description: 'Product has been created, returning the id of the new product.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 611a79822bfa1857e423ad75
                    description: ID of the created product
        400:
          $ref: '#/components/responses/InvalidInput'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Forbidden'
        409:
          $ref: '#/components/responses/ProductExists'
    get:
      tags:
        - Products
      summary: Get a list of all products
      responses:
        200:
          description: 'Returning the list of products'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/product'
        401:
          $ref: '#/components/responses/AuthenticationError'
  /products/{id}:
    get:
      tags:
        - Products
      summary: Get a product
      parameters:
      - name: id
        in: path
        description: Id of the product that needs to be returned
        required: true
        schema:
          type: string
          example: 611a79822bfa1857e423ad75
      responses:
        200:
          description: 'Returning requested product data.'
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/product'
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error: Product not found.
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Forbidden'
    delete:
      tags:
        - Products
      summary: Delete product by ID
      parameters:
      - name: id
        in: path
        description: ID of the product that needs to be deleted
        required: true
        schema:
          type: string
          example: 611a79822bfa1857e423ad75
      responses:
        200:
          description: 'Product has been successfully deleted, returning the deleted product'
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/product'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error: Product not found.
    put:
      tags:
        - Products
      summary: Update a product by ID
      parameters:
      - name: id
        in: path
        description: Id of the product that needs to be updated
        required: true
        schema:
          type: string
          example: 611a79822bfa1857e423ad75
      requestBody:
        description: Object, containing updated product
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Vajas croissant
                price:
                  type: number
                  example: 800
                isAvailable:
                  type: boolean
                  example: true
                labels:
                  type: array
                  items:
                    type: string
                    example: új termék
      responses:
        200:
          description: 'Successfully updated product.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        400:
          $ref: '#/components/responses/InvalidInput'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          description: Order not found
  /labels:
    post:
      tags:
        - Labels
      summary: Create a new label
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                  name:
                    type: string
                    example: laktózmentes
      responses:
        201:
          description: Label has been created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 611a79822bfa1857e423ad75
                    description: ID of the order
        400:
          $ref: '#/components/responses/InvalidInput'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Forbidden'
    get:
      tags:
        - Labels
      summary: Get a list of all labels
      responses:
        200:
          description: Returning the list of labels
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/label'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Forbidden'
  /orders:
    post:
      tags:
        - Orders
      summary: Create a new order
      requestBody:
        description: Order info
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    $ref: '#/components/schemas/orderItem'
                sum:
                  type: number
      responses:
        201:
          description: 'Order has been placed returning the id of the new order'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 611a79822bfa1857e423ad75
                    description: ID of the order
        400:
          $ref: '#/components/responses/InvalidInput'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Forbidden'
    get:
      tags:
        - Orders
      summary: Get a list of all orders
      responses:
        201:
          description: 'Returning the list of orders'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/order'
        400:
          $ref: '#/components/responses/InvalidInput'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Forbidden'
  /orders/{id}:
    put:
      tags:
        - Orders
      summary: Update an order's status by ID
      parameters:
      - name: id
        in: path
        description: Id of the order that needs to be updated
        required: true
        schema:
          type: string
          example: 611a79822bfa1857e423ad75
      requestBody:
        description: Object, containing updated status
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: fulfilled
        required: true
      responses:
        200:
          description: 'Successfully updated order, returning the order.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order'
        400:
          $ref: '#/components/responses/InvalidInput'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          description: Order not found
    delete:
      tags:
        - Orders
      summary: Delete an order by ID
      parameters:
      - name: id
        in: path
        description: Id of the order that needs to be deleted
        required: true
        schema:
          type: string
          example: 611a79822bfa1857e423ad75
      responses:
        200:
          description: 'Successfully deleted order, returning the deleted order.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order'
        400:
          $ref: '#/components/responses/InvalidInput'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          description: Order not found
  /images/{id}:
    post:
      tags:
        - Images
      summary: Save a product image by productId
      parameters:
      - name: id
        in: path
        description: Id of the product
        required: true
        schema:
          type: string
          example: 611a79822bfa1857e423ad75
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
        required: true
      responses:
        200:
          description: 'Successfully updated product image, returning the product.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        400:
          $ref: '#/components/responses/InvalidInput'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          description: Product not found
    put:
      tags:
        - Images
      summary: Update a product image by productId
      parameters:
      - name: id
        in: path
        description: Id of the product that needs to be updated
        required: true
        schema:
          type: string
          example: 611a79822bfa1857e423ad75
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
        required: true
      responses:
        200:
          description: 'Successfully updated product image, returning the product.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        400:
          $ref: '#/components/responses/InvalidInput'
        401:
          $ref: '#/components/responses/AuthenticationError'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          description: Product not found
  /auth:
    post:
      tags:
        - Authentication
      description: Login user
      requestBody:
        description: User to login
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: email@email.com
                password:
                  type: string
                  format: password
                  example: supersecretpassword
      responses:
        200:
          description: 'Successful login, returning JWT  token containing user info.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwZmJlYjA5OTY3OTk5NDM4NDUwNzRmOSIsImVtYWlsIjoidGVzdEB0ZXN0Z3R0Lnh5emFzZCIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTYyODE0Nzc3OSwiZXhwIjoxNjI4MjM0MTc5fQ.U9Dse_ZofydUUgXCkCuVS1UP9Mu5G66EDbrpQktLBw
        401:
          $ref: '#/components/responses/LoginFailed'
components:
  schemas:
    user:
      type: object
      properties:
        id:
          type: string
          example: 611a79822bfa1857e423ad75
        email:
          type: email
          example: john.doe@email.com
        role:
          type: string
          enum: [customer, admin]
          example: customer
    product:
      type: object
      properties:
        _id:
          type: string
          example: 611a79822bfa1857e423ad75
        name:
          type: string
          example: Vajas croissant
        price:
          type: number
          example: 800
        isAvailable:
          type: boolean
          example: true
        image:
          type: object
          $ref: '#/components/schemas/productImage'
        labels:
          type: array
          items:
            type: string
            example: új termék
    label:
      type: object
      properties:
        _id:
          type: string
          example: 611a79822bfa1857e423ad75
        name:
          type: string
          example: laktózmentes
    order:
      type: object
      properties:
        _id:
          type: string
          example: 611a79822bfa1857e423ad75
        customer:
          type: object
          $ref: '#/components/schemas/user'
        items:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/orderItem'
        sum:
          type: number
        status:
          type: string
          enum: [pending, accepted, refused, fulfilled]
        datePosted:
          type: string
          format: date
    orderItem:
      type: object
      properties:
        product:
          type: string
          example: 611a79822bfa1857e423ad75
        quantity:
          type: number
        name:
          type: string
          example: Vajas croissant
        price:
          type: number
          example: 800
    productImage:
      type: object
      properties:
        product:
          type: object
          schema:
          $ref: '#/components/schemas/product'
        path:
          type: string
          example: ../image-server/public/example-vajas-croissant.jpg
        url:
          type: string
          example: http://localhost:4001/example-vajas-croissant.jpg   
        _id:
          type: string
          example: 611a79822bfa1857e423ad75
    error_response:
      type: object
      properties:
        message:
          type: string
          example: Validation error
  responses:
    AuthenticationError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Authentication error: No token found.
    LoginFailed:
      description: Login failed, invalid credentials.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Authentication error: Invalid password.
    InternalServerError:
      description: Internal server error. Something has gone terribly wrong. :(
    InvalidInput:
      description: Invalid input
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Validation error: Missing field.
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Authorization error: Unauthorized
    ProductExists:      
      description: Product name exists
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Validation error: A product with the same name already exists.
    UserExists:      
      description: Email is already registered
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Validation error: Email is already registered.